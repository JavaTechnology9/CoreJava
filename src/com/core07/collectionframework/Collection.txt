Collection<E>
int size();
boolean isEmpty();
Iterator<E> iterator();
Object[] toArray();
  <T> T[] toArray(T[] a);
  boolean add(E e);
 boolean remove(Object o);
 boolean contains(Object o);
 containsAll(Collection<?> c);
 boolean addAll(Collection<? extends E> c);
 boolean removeAll(Collection<?> c);
 boolean retainAll(Collection<?> c);
 void clear();
 boolean equals(Object o);
  int hashCode();
  
  AbstractCollection implements Collection<E>
  ========================
  List
  boolean addAll(int index, Collection<? extends E> c);
  E get(int index);
  E set(int index, E element);
  void add(int index, E element);
  E remove(int index);
  int indexOf(Object o);
  int lastIndexOf(Object o);
  ListIterator<E> listIterator();
  ListIterator<E> listIterator(int index);
  List<E> subList(int fromIndex, int toIndex);
  
  ==========================
  Set<E> extends Collection<E>
  int size();
boolean isEmpty();
Iterator<E> iterator();
Object[] toArray();
  <T> T[] toArray(T[] a);
  boolean add(E e);
 boolean remove(Object o);
 containsAll(Collection<?> c);
 boolean addAll(Collection<? extends E> c);
 boolean removeAll(Collection<?> c);
 boolean retainAll(Collection<?> c);
 void clear();
 boolean equals(Object o);
  int hashCode();
===========================
SortedSet<E> extends Set<E>  
Comparator<? super E> comparator();
SortedSet<E> subSet(E fromElement, E toElement);
 SortedSet<E> headSet(E toElement);
 SortedSet<E> tailSet(E fromElement);
 E first();
 E last();
 ===============
 NavigableSet<E> extends SortedSet<E>
 E lower(E e); <
 E floor(E e); <= or <
 E ceiling(E e); >= or >
 E higher(E e); >
 E pollFirst();
 E pollLast();
 NavigableSet<E> descendingSet();
 Iterator<E> descendingIterator();
 NavigableSet<E> subSet(E fromElement, boolean fromInclusive,
                           E toElement,   boolean toInclusive);
NavigableSet<E> headSet(E toElement, boolean inclusive);
NavigableSet<E> tailSet(E fromElement, boolean inclusive);

============================
Queue<E> extends Collection<E>
boolean add(E e);
boolean offer(E e);
E remove();
E poll();
E element();
E peek();
====================
Deque<E> extends Queue<E>
void addFirst(E e);
void addLast(E e);
boolean offerFirst(E e);
boolean offerLast(E e);
E removeFirst();
E removeLast();
E pollFirst();
E pollLast();
E getFirst();
E getLast();
E peekFirst();
E peekLast();
boolean removeFirstOccurrence(Object o);
 boolean removeLastOccurrence(Object o);
=======================================
Map<K,V>
size();
 boolean isEmpty();
 boolean containsKey(Object key);
 boolean containsValue(Object value);
 V get(Object key);
 V put(K key, V value);
  V remove(Object key);
  void putAll(Map<? extends K, ? extends V> m);
  void clear();
  Set<K> keySet();
  Collection<V> values();
  Set<Map.Entry<K, V>> entrySet();
 ================================
 Entry<K, V>
 K getKey();
 V getValue();
 V setValue(V value);
 ====================
 SortedMap<K,V> extends Map<K,V>
  Comparator<? super K> comparator();
  SortedMap<K,V> subMap(K fromKey, K toKey);
  SortedMap<K,V> headMap(K toKey);
  SortedMap<K,V> tailMap(K fromKey);
   K firstKey();
 K lastKey();
 Set<K> keySet();
  Collection<V> values();
  Set<Map.Entry<K, V>> entrySet();
  =============================
  NavigableMap<K,V> extends SortedMap<K,V>
  Map.Entry<K,V> lowerEntry(K key);<0
      K lowerKey(K key);  <0
  Map.Entry<K,V> floorEntry(K key); //less than or equal to the given key
  K floorKey(K key);
  .Entry<K,V> ceilingEntry(K key); // greater than or equal to the given key
  K ceilingKey(K key);
  Map.Entry<K,V> higherEntry(K key); //greater than the given key
  K higherKey(K key); 
  Map.Entry<K,V> firstEntry(); // it will not remove
  Map.Entry<K,V> lastEntry();
  Map.Entry<K,V> pollFirstEntry(); // remove
  Map.Entry<K,V> pollLastEntry();
  NavigableMap<K,V> descendingMap();
  NavigableSet<K> navigableKeySet();
  NavigableSet<K> descendingKeySet();
  NavigableMap<K,V> subMap(K fromKey, boolean fromInclusive,
                             K toKey,   boolean toInclusive);
NavigableMap<K,V> headMap(K toKey, boolean inclusive);
NavigableMap<K,V> tailMap(K fromKey, boolean inclusive);
 SortedMap<K,V> subMap(K fromKey, K toKey);
 SortedMap<K,V> headMap(K toKey);
  SortedMap<K,V> tailMap(K fromKey);