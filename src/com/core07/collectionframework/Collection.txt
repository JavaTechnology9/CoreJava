Collection<E>
int size();
boolean isEmpty();
Iterator<E> iterator();
Object[] toArray();
  <T> T[] toArray(T[] a);
  boolean add(E e);
 boolean remove(Object o);
 boolean contains(Object o);
 containsAll(Collection<?> c);
 boolean addAll(Collection<? extends E> c);
 boolean removeAll(Collection<?> c);
 boolean retainAll(Collection<?> c);
 void clear();
 boolean equals(Object o);
  int hashCode();
  
  AbstractCollection implements Collection<E>
  ========================
  List
  boolean addAll(int index, Collection<? extends E> c);
  E get(int index);
  E set(int index, E element);
  void add(int index, E element);
  E remove(int index);
  int indexOf(Object o);
  int lastIndexOf(Object o);
  ListIterator<E> listIterator();
  ListIterator<E> listIterator(int index);
  List<E> subList(int fromIndex, int toIndex);
  
  ==========================
  Set<E> extends Collection<E>
  int size();
boolean isEmpty();
Iterator<E> iterator();
Object[] toArray();
  <T> T[] toArray(T[] a);
  boolean add(E e);
 boolean remove(Object o);
 containsAll(Collection<?> c);
 boolean addAll(Collection<? extends E> c);
 boolean removeAll(Collection<?> c);
 boolean retainAll(Collection<?> c);
 void clear();
 boolean equals(Object o);
  int hashCode();
===========================
SortedSet<E> extends Set<E>  
Comparator<? super E> comparator();
SortedSet<E> subSet(E fromElement, E toElement);
 SortedSet<E> headSet(E toElement);
 SortedSet<E> tailSet(E fromElement);
 E first();
 E last();
 ===============
 NavigableSet<E> extends SortedSet<E>
 E lower(E e); <
 E floor(E e); <= or <
 E ceiling(E e); >= or >
 E higher(E e); >
 E pollFirst();
 E pollLast();
 NavigableSet<E> descendingSet();
 Iterator<E> descendingIterator();
 NavigableSet<E> subSet(E fromElement, boolean fromInclusive,
                           E toElement,   boolean toInclusive);
NavigableSet<E> headSet(E toElement, boolean inclusive);
NavigableSet<E> tailSet(E fromElement, boolean inclusive);

============================
Queue<E> extends Collection<E>
boolean add(E e);
boolean offer(E e);
E remove();
E poll();
E element();
E peek();
====================
Deque<E> extends Queue<E>
void addFirst(E e);
void addLast(E e);
boolean offerFirst(E e);
boolean offerLast(E e);
E removeFirst();
E removeLast();
E pollFirst();
E pollLast();
E getFirst();
E getLast();
E peekFirst();
E peekLast();
boolean removeFirstOccurrence(Object o);
 boolean removeLastOccurrence(Object o);
